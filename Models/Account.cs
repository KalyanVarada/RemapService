using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace RemapService.Models
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var Account = Account.FromJson(jsonString);


    public partial class Account
    {
        [JsonProperty("Node")]
        public Node Node { get; set; }

        [JsonProperty("Service")]
        public Service Service { get; set; }

        [JsonProperty("Checks")]
        public List<Check> Checks { get; set; }
    }

    public partial class Check
    {
        [JsonProperty("Node")]
        public string Node { get; set; }

        [JsonProperty("CheckID")]
        public string CheckId { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Status")]
        public string Status { get; set; }

        [JsonProperty("Notes")]
        public string Notes { get; set; }

        [JsonProperty("Output")]
        public string Output { get; set; }

        [JsonProperty("ServiceID")]
        public string ServiceId { get; set; }

        [JsonProperty("ServiceName")]
        public string ServiceName { get; set; }

        [JsonProperty("ServiceTags")]
        public List<string> ServiceTags { get; set; }

        [JsonProperty("CreateIndex")]
        public long CreateIndex { get; set; }

        [JsonProperty("ModifyIndex")]
        public long ModifyIndex { get; set; }
    }

    public partial class Node
    {
        [JsonProperty("ID")]
        public Guid Id { get; set; }

        [JsonProperty("Node")]
        public string NodeNode { get; set; }

        [JsonProperty("Address")]
        public string Address { get; set; }

        [JsonProperty("Datacenter")]
        public string Datacenter { get; set; }

        [JsonProperty("TaggedAddresses")]
        public TaggedAddresses TaggedAddresses { get; set; }

        [JsonProperty("Meta")]
        public Meta Meta { get; set; }

        [JsonProperty("CreateIndex")]
        public long CreateIndex { get; set; }

        [JsonProperty("ModifyIndex")]
        public long ModifyIndex { get; set; }
    }

    public partial class Meta
    {
    }

    public partial class TaggedAddresses
    {
        [JsonProperty("lan")]
        public string Lan { get; set; }

        [JsonProperty("wan")]
        public string Wan { get; set; }
    }

    public partial class Service
    {
        [JsonProperty("ID")]
        public string Id { get; set; }

        [JsonProperty("Service")]
        public string ServiceService { get; set; }

        [JsonProperty("Tags")]
        public List<string> Tags { get; set; }

        [JsonProperty("Address")]
        public string Address { get; set; }

        [JsonProperty("Port")]
        public long Port { get; set; }

        [JsonProperty("EnableTagOverride")]
        public bool EnableTagOverride { get; set; }

        [JsonProperty("CreateIndex")]
        public long CreateIndex { get; set; }

        [JsonProperty("ModifyIndex")]
        public long ModifyIndex { get; set; }
    }

    public partial class Account
    {
        public static List<Account> FromJson(string json) => JsonConvert.DeserializeObject<List<Account>>(json, RemapService.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Account> self) => JsonConvert.SerializeObject(self, RemapService.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            NullValueHandling = NullValueHandling.Ignore,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }




}
